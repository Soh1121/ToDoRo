version: 2.1
executors:
  my-executor:
    docker:
      - image: circleci/php:7.4.1-node-browsers
    working_directory: ~/todoro

commands:
  restore_aws:
    steps:
      - restore_cache:
          key: work-v1-{{ .Revision }}

  save_aws:
    steps:
      - save_cache:
          paths:
            - "aws-cli"
          key: work-v1-{{ .Revision }}

  restore_composer:
    steps:
      - restore_cache:
          key: composer-v1-{{ .Revision }}

  save_composer:
    steps:
      - save_cache:
          paths:
            - "web/vendor"
          key: composer-v1-{{ .Revision }}

  restore_npm:
    steps:
      - restore_cache:
          key: npm-v1-{{ .Revision }}

  save_npm:
    steps:
      - save_cache:
          paths:
            - "web/frontend/node_modules"
          key: npm-v1-{{ .Revision }}

  install:
    steps:
      - run:
          name: install
          command: |
            if [[ ! -d aws-cli ]]; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install --install-dir ~/work/aws-cli
            fi

  assume_role:
    steps:
      - run:
          name: Assume Role
          command: |
            export PATH=$PATH:$HOME/work/aws-cli/v2/current/bin

            aws configure set aws_access_key_id ${PROD_AWS_ACCESS_KEY_ID}
            aws configure set aws_secret_access_key ${PROD_AWS_SECRET_ACCESS_KEY}

            AWS_STS_CREDENTIALS="$(aws sts assume-role \
              --role-arn "${PROD_AWS_ASSUME_ROLE_ARN}" \
              --role-session-name "CircleCI" \
              --external-id ${AWS_DEPLOY_IAM_ROLE_EXTERNAL_ID} \
              --duration-seconds 1800 \
              --query "Credentials" \
              --output "json")"
            echo "export AWS_ACCESS_KEY_ID=$(echo ${AWS_STS_CREDENTIALS} | jq -r '.AccessKeyId')" >> ${BASH_ENV}
            echo "export AWS_SECRET_ACCESS_KEY=$(echo ${AWS_STS_CREDENTIALS} | jq -r '.SecretAccessKey')" >> ${BASH_ENV}
            echo "export AWS_SESSION_TOKEN=$(echo ${AWS_STS_CREDENTIALS} | jq -r '.SessionToken')"  >> ${BASH_ENV}

  login_to_ecr:
    steps:
      - run:
          name: Login to ECR
          command: aws ecr get-login-password | docker login --username AWS --password-stdin ${AWS_ACCOUNT_URL}

  push_nginx_image_to_ecr:
    steps:
      - run:
          name: Set Environment
          command: |
            echo "export ECR_REPOSITORY=${SERVICE_NAME}-${ENV_NAME}-nginx" >> ${BASH_ENV}
      - run:
          name: Push nginx image to ECR
          command: |
            docker build \
              --cache-from=$AWS_ACCOUNT_URL/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
              -f docker/nginx/Dockerfile \
              -t $AWS_ACCOUNT_URL/$ECR_REPOSITORY:latest \
              -t $AWS_ACCOUNT_URL/$ECR_REPOSITORY:${CIRCLE_SHA1}
            docker push $AWS_ACCOUNT_URL/$ECR_REPOSITORY:latest
            docker push $AWS_ACCOUNT_URL/$ECR_REPOSITORY:${CIRCLE_SHA1}

jobs:
  test:
    docker:
      - image: circleci/php:7.4.1-node-browsers
    working_directory: ~/todoro
    steps:
      - checkout
      - run:
          name: Update apt-get
          command: sudo apt-get update
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "~/todoro/web/composer.json" }}
            - v1-dependencies-
      - run:
          name: Install PHP libraries
          command: composer install -n --prefer-dist
          working_directory: ~/todoro/web
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "~/todoro/web/composer.json" }}
      - run:
          name: Run PHPUnit
          command: vendor/bin/phpunit
          working_directory: ~/todoro/web

  build_and_push_image:
    executor: my-executor
    steps:
      - checkout
      - restore_aws
      - install
      - save_aws
      - assume_role
      - run:
          name: Set env vars for prod
          command: echo "ENV_NAME=prod" >> $BASH_ENV
      - setup_remote_docker
      - run: docker-compose up -d --build web nginx
      - restore_composer
      - run:
          name: Install PHP related packages
          command: docker-compose exec -T web composer install -n --prefer-dist --no-dev
      - save_composer
      - restore_npm
      - run:
          name: Install JavaScript packages
          command: docker-compose exec -T web bash -c "cd ./frontend && npm ci"
      - save_npm
      - run:
          name: JavaScript transpile
          command: docker-compose exec -T web bash -c "cd ./frontend && npm run build"
      - login_to_ecr
      - push_nginx_image_to_ecr
      # - aws-ecr/build-and-push-image:
      #     account-url: AWS_ACCOUNT_URL
      #     aws-access-key-id: PROD_AWS_ACCESS_KEY_ID
      #     aws-secret-access-key: PROD_AWS_SECRET_ACCESS_KEY
      #     repo: "${AWS_RESOURCE_NAME_PREFIX}-php"
      #     region: AWS_REGION
      #     tag: "${CIRCLE_SHA1}"
          # path:
          # dockerfile:

workflows:
  version: 2
  deploy:
    jobs:
      # - test
      - build_and_push_image:
          # requires:
            # - test
          filters:
            branches:
              only:
                - master
                - feature/pushImagesToECR
